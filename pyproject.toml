[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "fuzzy-infer"
version = "0.1.0"
description = "A Fuzzy Forward-Chaining Production Rule System for Python"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "FuzzyInfer Contributors"},
]
maintainers = [
    {name = "FuzzyInfer Contributors"},
]
keywords = [
    "fuzzy logic",
    "inference engine",
    "production rules",
    "forward chaining",
    "knowledge base",
    "expert systems",
    "artificial intelligence",
    "uncertainty",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
requires-python = ">=3.8"
dependencies = []

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-benchmark>=4.0.0",
    "black>=23.7.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "hypothesis>=6.82.0",
]
cli = [
    "typer>=0.9.0",
    "rich>=13.5.0",
    "prompt-toolkit>=3.0.0",
]
serialization = [
    "pyyaml>=6.0",
]
viz = [
    "matplotlib>=3.7.0",
    "networkx>=3.1",
    "graphviz>=0.20.0",
]
docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "myst-parser>=2.0.0",
]
all = [
    "fuzzy-infer[dev,cli,serialization,viz,docs]",
]

[project.urls]
Homepage = "https://github.com/yourusername/fuzzy-infer"
Documentation = "https://fuzzy-infer.readthedocs.io"
Repository = "https://github.com/yourusername/fuzzy-infer"
Issues = "https://github.com/yourusername/fuzzy-infer/issues"

[project.scripts]
fuzzy-infer = "fuzzy_infer.cli:app"

[tool.setuptools.packages.find]
include = ["fuzzy_infer*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
fuzzy_infer = ["py.typed"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.ruff_cache
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py38"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "SIM",  # flake8-simplify
    "RUF",  # ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "D"]  # Allow assert statements and missing docstrings in tests

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pytest.*",
    "hypothesis.*",
    "yaml.*",
    "matplotlib.*",
    "networkx.*",
    "graphviz.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
pythonpath = ["."]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=fuzzy_infer",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=90",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["fuzzy_infer"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/cli.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]